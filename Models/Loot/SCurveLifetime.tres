[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://da07kweqijek7"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_lmqcj"]
input_name = "lifetime"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_yahbp"]
operator = 2

[sub_resource type="VisualShaderNodeCurveTexture" id="VisualShaderNodeCurveTexture_l1f6g"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_amfkd"]
operator = 2

[sub_resource type="VisualShaderNodeCurveTexture" id="VisualShaderNodeCurveTexture_d4vkg"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ja3gh"]
input_name = "lifetime"

[resource]
code = "shader_type particles;
uniform sampler2D curve_start_3 : repeat_disable;
uniform sampler2D curve_process_4 : repeat_disable;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// CurveTexture:3
		float n_in3p0 = 0.00000;
		float n_out3p0 = texture(curve_start_3, vec2(n_in3p0)).r;


// Input:4
		float n_out4p0 = LIFETIME;


// FloatOp:2
		float n_out2p0 = n_out3p0 * n_out4p0;


// StartOutput:0
		COLOR.a = n_out2p0;
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// CurveTexture:4
		float n_in4p0 = 0.00000;
		float n_out4p0 = texture(curve_process_4, vec2(n_in4p0)).r;


// Input:2
		float n_out2p0 = LIFETIME;


// FloatOp:3
		float n_out3p0 = n_out4p0 * n_out2p0;


// ProcessOutput:0
		COLOR.a = n_out3p0;


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(520, 160)
nodes/start/2/node = SubResource("VisualShaderNodeFloatOp_amfkd")
nodes/start/2/position = Vector2(100, 160)
nodes/start/3/node = SubResource("VisualShaderNodeCurveTexture_d4vkg")
nodes/start/3/position = Vector2(-560, 60)
nodes/start/4/node = SubResource("VisualShaderNodeInput_ja3gh")
nodes/start/4/position = Vector2(-240, 320)
nodes/start/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 3)
nodes/process/2/node = SubResource("VisualShaderNodeInput_lmqcj")
nodes/process/2/position = Vector2(-240, 280)
nodes/process/3/node = SubResource("VisualShaderNodeFloatOp_yahbp")
nodes/process/3/position = Vector2(80, 200)
nodes/process/4/node = SubResource("VisualShaderNodeCurveTexture_l1f6g")
nodes/process/4/position = Vector2(-600, 100)
nodes/process/connections = PackedInt32Array(2, 0, 3, 1, 4, 0, 3, 0, 3, 0, 0, 3)
